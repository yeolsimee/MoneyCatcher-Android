@file:OptIn(
    ExperimentalLayoutApi::class, ExperimentalLayoutApi::class,
    ExperimentalLayoutApi::class
)

package com.yeolsimee.moneysaving.view.routine

import android.app.TimePickerDialog
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.ExperimentalLayoutApi
import androidx.compose.foundation.layout.FlowRow
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.BasicTextField
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material3.Icon
import androidx.compose.runtime.Composable
import androidx.compose.runtime.MutableState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.focus.FocusRequester
import androidx.compose.ui.focus.focusRequester
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.yeolsimee.moneysaving.R
import com.yeolsimee.moneysaving.domain.entity.category.TextItem
import com.yeolsimee.moneysaving.ui.PrText
import com.yeolsimee.moneysaving.ui.calendar.DayOfWeekIcon
import com.yeolsimee.moneysaving.ui.dialog.AddCategoryDialog
import com.yeolsimee.moneysaving.ui.list_item.SelectedItem
import com.yeolsimee.moneysaving.ui.list_item.UnSelectedItem
import com.yeolsimee.moneysaving.ui.theme.Gray99
import com.yeolsimee.moneysaving.ui.theme.GrayF0
import com.yeolsimee.moneysaving.ui.theme.RoumoTheme
import com.yeolsimee.moneysaving.utils.getTwoDigitsHour
import com.yeolsimee.moneysaving.utils.getTwoDigitsMinute

@Composable
fun InputRoutineName(routineName: MutableState<String>, focusRequester: FocusRequester) {
    Column {
        Row(verticalAlignment = Alignment.CenterVertically) {
            Image(
                painter = painterResource(id = R.drawable.image_pencil),
                contentDescription = "Î£®Ìã¥Î™Ö ÏûÖÎ†•"
            )
            Spacer(Modifier.width(4.dp))
            PrText(
                text = "Î£®Ìã¥Î™ÖÏùÄ Î¨¥ÏóáÏù∏Í∞ÄÏöî?", fontWeight = FontWeight.W700, fontSize = 15.sp
            )
        }
        Spacer(Modifier.height(4.dp))
        BasicTextField(
            value = routineName.value,
            textStyle = TextStyle(
                fontWeight = FontWeight.W600,
                fontSize = 14.sp,
                color = Color.Black
            ), onValueChange = { t ->
                if (t.length <= 50) {
                    routineName.value = t
                }
            }, singleLine = true, decorationBox = { innerTextField ->
                Box {
                    if (routineName.value.isEmpty()) {
                        PrText(
                            text = "Î£®Ìã¥Î™ÖÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.",
                            color = Gray99,
                            fontSize = 14.sp,
                            fontWeight = FontWeight.W400
                        )
                    }
                    innerTextField()
                }
            }, modifier = Modifier
                .padding(top = 10.dp, bottom = 9.dp)
                .fillMaxWidth()
                .focusRequester(focusRequester)
        )
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(1.dp)
                .background(Color.Black)
        )
    }
}

@Preview(showBackground = true)
@Composable
fun InputRoutineNamePreview() {
    val focusRequester by remember { mutableStateOf(FocusRequester()) }
    RoumoTheme {
        Column(modifier = Modifier) {
            Spacer(Modifier.height(8.dp))
            InputRoutineName(
                routineName = remember { mutableStateOf("") },
                focusRequester = focusRequester
            )
            Spacer(Modifier.height(8.dp))
            InputRoutineName(
                routineName = remember { mutableStateOf("Î£®Ìã¥Î™Ö") },
                focusRequester = focusRequester
            )
            Spacer(Modifier.height(8.dp))
        }
    }
}

@Composable
fun SelectCategory(
    categories: MutableList<TextItem>,
    selectedId: MutableState<String>,
    addCategoryState: MutableState<Boolean>,
    selectCallback: (String) -> Unit,
    addCallback: (String) -> Unit = {},
) {
    Column(modifier = Modifier) {
        Row(verticalAlignment = Alignment.CenterVertically) {
            Image(
                painter = painterResource(id = R.drawable.image_tag),
                contentDescription = "Î£®Ìã¥ Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ§Ï†ï"
            )
            Spacer(Modifier.width(4.dp))
            PrText(
                text = "Î£®Ìã¥Ïùò Ïπ¥ÌÖåÍ≥†Î¶¨Î•º ÏÑ§Ï†ïÌï¥Ï£ºÏÑ∏Ïöî", fontWeight = FontWeight.W700, fontSize = 15.sp
            )
        }
        Spacer(Modifier.height(11.dp))
        FlowRow {
            categories.forEach {
                if (selectedId.value == it.id) {
                    SelectedItem(it, selectCallback)
                } else {
                    UnSelectedItem(it, selectCallback)
                }
            }
            if (categories.size < 10) {
                Box(Modifier.padding(top = 6.dp)) {
                    Box(
                        Modifier
                            .size(32.dp)
                            .clip(RoundedCornerShape(4.dp))
                            .background(Color.Black)
                            .clickable(interactionSource = remember {
                                MutableInteractionSource()
                            }, indication = null, onClick = {
                                addCategoryState.value = true
                            })
                    ) {
                        Icon(
                            imageVector = Icons.Default.Add,
                            contentDescription = "Ïπ¥ÌÖåÍ≥†Î¶¨ Ï∂îÍ∞Ä",
                            tint = Color.White,
                            modifier = Modifier
                                .width(16.dp)
                                .height(16.dp)
                                .align(Alignment.Center)
                        )
                    }
                }
                AddCategoryDialog(
                    dialogState = addCategoryState,
                    confirmButtonListener = { addCallback(it) })
            }
        }
    }
}


@Preview(showBackground = true, widthDp = 400)
@Composable
fun SelectCategoryPreview() {
    RoumoTheme {
        val selectedCategoryId = remember { mutableStateOf("1") }
        val addCategoryState = remember { mutableStateOf(false) }
        SelectCategory(
            mutableListOf(
                TextItem("1", "üí∞ÏïÑÍª¥Ïì∞Í∏∞"),
                TextItem("2", "Ï£ºÎ¶∞Ïù¥ ÏÑ±Ïû•ÏùºÍ∏∞"),
                TextItem("3", "ÏûÑÌã∞Îäî ÏÇ¨Ïö©Ïûê ÏûêÏú†"),
                TextItem("4", "Ïó¥ÎÑ§Í∏ÄÏûêÍπåÏßÄÎì§Ïñ¥Í∞ÄÏöîÏùºÏù¥ÏÇºÏÇ¨")
            ),
            selectedId = selectedCategoryId,
            addCategoryState = addCategoryState,
            selectCallback = {
                selectedCategoryId.value = it
            },
            addCallback = {}
        )
    }
}

@Composable
fun SelectRoutineRepeat(selectedList: List<Boolean>, onClick: (Int) -> Unit) {
    Column {
        Row(verticalAlignment = Alignment.CenterVertically) {
            Image(
                painter = painterResource(id = R.drawable.image_refresh),
                contentDescription = "Î£®Ìã¥ Î∞òÎ≥µ ÏÑ§Ï†ï"
            )
            Spacer(Modifier.width(4.dp))
            PrText(text = "Î£®Ìã¥ÏùÑ Ïñ∏Ï†ú Î∞òÎ≥µÌï†ÍπåÏöî?", fontWeight = FontWeight.W700, fontSize = 15.sp)
        }
        Spacer(Modifier.height(12.dp))
        Row {
            for (i in 0 until 7) {
                if (i != 0) {
                    Spacer(Modifier.width(10.dp))
                }
                DayOfWeekIcon(
                    dayOfWeek = i,
                    initialSelected = selectedList[i],
                    onClick = { onClick(i) })
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun SelectRoutineRepeatPreview() {
    RoumoTheme {
        SelectRoutineRepeat(
            mutableListOf(false, false, false, true, false, false, false)
        ) {}
    }
}

@Composable
fun SelectRoutineTimeZone(
    selectedId: MutableState<String>,
    selectCallback: (String) -> Unit
) {
    val timeZoneList = remember {
        mutableListOf(
            TextItem("1", "ÌïòÎ£®Ï¢ÖÏùº"),
            TextItem("2", "ÏïÑÎ¨¥ÎïåÎÇò"),
            TextItem("3", "Í∏∞ÏÉÅÏßÅÌõÑ"),
            TextItem("4", "ÏïÑÏπ®"),
            TextItem("5", "Ïò§Ï†Ñ"),
            TextItem("6", "Ï†êÏã¨"),
            TextItem("7", "Ïò§ÌõÑ"),
            TextItem("8", "Ï†ÄÎÖÅ"),
            TextItem("9", "Î∞§"),
            TextItem("10", "Ï∑®Ïπ®ÏßÅÏ†Ñ"),
        )
    }
    Column {
        Row(verticalAlignment = Alignment.CenterVertically) {
            Image(
                painter = painterResource(id = R.drawable.image_time),
                contentDescription = "Î£®Ìã¥ ÏàòÌñâ ÏãúÍ∞ÑÎåÄ"
            )
            Spacer(Modifier.width(4.dp))
            PrText(
                text = "Î£®Ìã¥ÏùÑ ÏàòÌñâÌï† ÏãúÍ∞ÑÎåÄÎ•º ÏÑ§Ï†ïÌï¥Ï£ºÏÑ∏Ïöî",
                fontWeight = FontWeight.W700,
                fontSize = 15.sp,
            )
        }
        Spacer(Modifier.height(11.dp))
        FlowRow {
            timeZoneList.forEach {
                if (selectedId.value == it.id) {
                    SelectedItem(it, selectCallback)
                } else {
                    UnSelectedItem(it, selectCallback)
                }
            }
        }
    }
}


@Preview(showBackground = true, widthDp = 319)
@Composable
fun SelectRoutineTimeZonePreview() {
    RoumoTheme {
        SelectRoutineTimeZone(
            selectedId = remember {
                mutableStateOf("1")
            }) {}
    }
}

@Composable
fun SettingAlarmTime(
    alarmState: MutableState<Boolean>,
    hourState: MutableState<Int>,
    minuteState: MutableState<Int>,
    hasNotificationPermission: () -> Boolean = { false },
) {
    val timeText = hourState.value.getTwoDigitsHour() + ":" +
            minuteState.value.getTwoDigitsMinute()

    Column {
        Row(
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically,
            modifier = Modifier.fillMaxWidth()
        ) {
            Row(verticalAlignment = Alignment.CenterVertically) {
                Image(
                    painter = painterResource(id = R.drawable.image_alram),
                    contentDescription = "ÏïåÎûå"
                )
                Spacer(Modifier.width(4.dp))
                PrText(text = "ÏïåÎûåÏù¥ ÌïÑÏöîÌïòÏÑ∏Ïöî?", fontWeight = FontWeight.W700, fontSize = 15.sp)
            }
            if (alarmState.value) {
                Image(
                    painter = painterResource(id = R.drawable.toggle_on),
                    contentDescription = "ÏºúÏßê",
                    Modifier.clickable(
                        interactionSource = remember { MutableInteractionSource() },
                        indication = null,
                        onClick = {
                            alarmState.value = !alarmState.value
                        }
                    )
                )
            } else {
                Image(
                    painter = painterResource(id = R.drawable.toggle_off),
                    contentDescription = "Í∫ºÏßê",
                    Modifier.clickable(
                        interactionSource = remember { MutableInteractionSource() },
                        indication = null,
                        onClick = {
                            // TODO ÏïåÎûå Í∂åÌïú ÌôïÏù∏
                            if (hasNotificationPermission()) {
                                alarmState.value = !alarmState.value
                            }
                        }
                    )
                )
            }
        }
        if (alarmState.value) {
            Spacer(Modifier.height(16.dp))
            Row(
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier.fillMaxWidth()
            ) {
                Row(verticalAlignment = Alignment.CenterVertically) {
                    Image(
                        painter = painterResource(id = R.drawable.arrow_forward),
                        contentDescription = "Î™á ÏãúÏóê ÏïåÎ†§ÎìúÎ¶¥ÍπåÏöî?",
                        modifier = Modifier.padding(start = 3.dp, end = 5.5.dp)
                    )
                    PrText(text = "Î™á ÏãúÏóê ÏïåÎ†§ÎìúÎ¶¥ÍπåÏöî?", fontWeight = FontWeight.W600, fontSize = 13.sp)
                }
                val localContext = LocalContext.current
                Box(
                    modifier = Modifier
                        .clip(RoundedCornerShape(4.dp))
                        .background(Color.White)
                        .border(width = 1.5.dp, color = GrayF0, shape = RoundedCornerShape(4.dp))
                        .padding(vertical = 8.dp, horizontal = 10.dp)
                        .clickable(
                            interactionSource = remember { MutableInteractionSource() },
                            indication = null,
                            onClick = {
                                val dialog = TimePickerDialog(localContext, { _, h, m ->
                                    hourState.value = h
                                    minuteState.value = m
                                }, hourState.value, minuteState.value, false)
                                dialog.show()
                            }
                        )
                ) {
                    PrText(text = timeText, fontWeight = FontWeight.W500, fontSize = 12.sp)
                }
            }
        }
    }
}


@Preview(showBackground = true, widthDp = 319)
@Composable
fun SettingAlarmTimePreview() {

    val alarmState1 = remember { mutableStateOf(true) }
    val alarmState2 = remember { mutableStateOf(false) }
    val hourState = remember { mutableStateOf(11) }
    val minuteState = remember { mutableStateOf(0) }

    RoumoTheme {
        Column {
            SettingAlarmTime(alarmState = alarmState1, hourState, minuteState)
            Spacer(modifier = Modifier.height(8.dp))
            SettingAlarmTime(alarmState = alarmState2, hourState, minuteState)
        }
    }
}
